import re from"express";import Se from"mongoose";import qe from"cors";import oe from"body-parser";import{Router as Ie}from"express";import{model as ae,Schema as ie}from"mongoose";var ue=new ie({email:String,picture:String,name:String,id_google:String,creationDate:Date,updateDate:Date,locale:String,given_name:String,family_name:String,wage:Number}),f=ae("Users",ue);import ce from"jsonwebtoken";function v(t){return ce.sign(t,"admin",{expiresIn:"1d"})}var D=async(t,e)=>{try{let{id_google:r}=t.body;if(!await f.findOne({id_google:r}))return e.status(201).json({checkUser:!1});e.status(201).json({checkUser:!0})}catch{}},I=async(t,e,r)=>{try{let n=await f.find();return e.status(200).json(n)}catch(n){return e.status(500).json({error:n})}},S=async(t,e,r)=>{let{email:n,picture:o,name:a,id_google:i,locale:c,given_name:s,family_name:u}=t.body;try{if(await f.findOne({id_google:i}))throw"user already exists";return await f.create({email:n,picture:o,name:a,id_google:i,locale:c,given_name:s,family_name:u,creationDate:new Date,updateDate:new Date,wage:0}),e.status(201).json({message:"Person added!"})}catch(l){return e.status(500).json({error:l})}},q=async(t,e)=>{let{id_google:r}=t.body;try{let n=await f.findOne({id_google:r});if(!n)throw"email of user is not correct";let o=v({sub:n._id,id_google:n.id_google});return e.status(201).send({person:n,token:o})}catch(n){return e.status(500).json({error:n})}},M=async(t,e)=>{let{user_id:r,wage:n}=t.body;try{if(console.log(n,"wage"),console.log(r,"user_id "),!n)return e.status(500).json({error:"wage required"});if(!r)return e.status(500).json({error:"user required"});let o=await f.findOneAndUpdate({_id:r},{wage:n}),a=await f.findOne({_id:r});return e.status(201).send({people:a})}catch{return e.status(500).json({error:"err"})}};import de from"jsonwebtoken";var le=async(t,e)=>{let r=String(t?.headers?.token||"");if(r)de.verify(r,"admin",async(n,o)=>{if(n)return e.status(403).json({message:n.message,error:n});if(!await f.findOne({_id:o?.sub}))return e.status(403).json({messagem:"forBidden"});t.headers.user=o?.sub});else return e.status(401).json({messagem:"Unauthorized"})},d=le;function E(t){t.get("/user/getall",I),t.post("/user/check",D),t.post("/user/register",S),t.post("/user/login",q),t.post("/user/save/wage",M),t.post("/token",d)}import{model as me,Schema as pe}from"mongoose";var ge=new pe({description:String,value:Number,date:Date,paymentConditions:String,paidGain:Boolean,category:String,observation:String,qtdInstallments:Number,valueRecurrence:Number,id_user:String}),m=me("Gain",ge);var N=async(t,e)=>{let{id:r,data:n}=t.body;try{d(t,e);let o=await m.findByIdAndUpdate(r,n),a=await m.findById(r);return e.status(201).json(a)}catch(o){return e.status(500).json({error:o})}},U=async(t,e)=>{let{id:r}=t.body;try{d(t,e);let n=await m.findById(r);if(!n?._id)return e.status(500).json({error:"Ganho n\xE3o encontrado"});let o=await m.deleteOne({_id:r}),a=await m.find({id_user:n?.id_user});return e.status(201).json(a)}catch(n){return e.status(500).json({error:n})}},C=async(t,e)=>{let{id_user:r}=t.body;try{d(t,e);let n=await m.find({id_user:r});return e.status(201).json(n)}catch(n){return e.status(500).json({error:n})}},F=async(t,e)=>{try{d(t,e);let{id:r}=t.body,n=await m.findOne({_id:r});return e.status(201).json(n)}catch(r){return e.status(500).json({error:r})}},O=async(t,e,r)=>{d(t,e);let{description:n,value:o,date:a,paymentConditions:i,paidGain:c,category:s,observation:u,id_user:l,valueRecurrence:y,qtdInstallments:g}=t.body;if(!n||!o||!a||!i||!l)return e.status(500).json({error:"H\xE1 obrigatorios campos n\xE3o preenchidos"});s||(s="no information"),u||(u=""),u||(u=""),c||(c=!1),y||(y=0),g||(g=0);try{return await m.create({description:n,value:o,date:a,paymentConditions:i,paidGain:c,id_user:l,valueRecurrence:y,qtdInstallments:g}),e.status(201).json({message:"Ganho criado com sucesso!"})}catch(w){return e.status(500).json({error:w})}};function k(t){t.get("/gain/all",C),t.post("/gain/get",F),t.put("/gain/update",N),t.delete("/gain/delete",U),t.post("/gain/create",O)}import{model as fe,Schema as ye}from"mongoose";var Re=new ye({description:String,value:Number,date:Date,paymentConditions:String,expensePayment:Boolean,category:String,local:String,qtdInstallments:Number,buyer:String,observation:String,id_goal:String,id_user:String,valueRecurrence:Number}),p=fe("Expense",Re);var B=async(t,e)=>{let{id:r,data:n}=t.body;try{d(t,e);let o=await p.findByIdAndUpdate(r,n),a=await p.findById(r);return e.status(201).json(a)}catch(o){return e.status(500).json({error:o})}},L=async(t,e)=>{let{id:r}=t.body;try{d(t,e);let n=await p.findById(r);if(!n?._id)return e.status(500).json({error:"Gasto n\xE3o encontrado"});let o=await p.deleteOne({_id:r}),a=await p.find({id_user:n?.id_user});return e.status(201).json(a)}catch(n){return e.status(500).json({error:n})}},A=async(t,e)=>{let{id_user:r}=t.body;try{d(t,e);let n=await p.find({id_user:r});return e.status(201).json(n)}catch(n){return e.status(500).json({error:n})}},P=async(t,e)=>{try{d(t,e);let{id:r}=t.body,n=await p.findOne({_id:r});return e.status(201).json(n)}catch(r){return e.status(500).json({error:r})}},W=async(t,e,r)=>{d(t,e);let{description:n,value:o,date:a,paymentConditions:i,expensePayment:c,category:s,local:u,qtdInstallments:l,buyer:y,observation:g,id_goal:w,id_user:G,valueRecurrence:_}=t.body;if(!n||!o||!a||!i||!G||c===void 0)return e.status(500).json({error:"H\xE1 obrigatorios campos n\xE3o preenchidos"});_||(_=0),s||(s="no information"),g||(g=""),u||(g=""),w||(w=""),y||(y=""),l||(l=0);try{return await p.create({description:n,value:o,date:a,paymentConditions:i,expensePayment:c,category:s,local:u,qtdInstallments:l,buyer:y,observation:g,id_goal:w,id_user:G,valueRecurrence:_}),e.status(201).json({message:"Gasto cadastrado com sucesso!"})}catch(se){return e.status(500).json({error:se})}};function H(t){t.post("/expense/all",A),t.get("/expense/get",P),t.put("/expense/update",B),t.delete("/expense/delete",L),t.post("/expense/create",W)}var T=async(t,e)=>{let{id_user:r,date:n}=t.body;try{d(t,e),console.log(r,"id_userid_user");let o=[];n||(n=new Date);let a=new Date(n);if(!r)return e.status(500).json({error:"user required"});let i=await m.find({id_user:r}),c=await p.find({id_user:r});return i.forEach((s,u)=>{if(s.paymentConditions==="Despesa recorrente"){o.push(s);return}if(new Date(s.date).getMonth()==a.getMonth()){o.push(s);return}if(s.paymentConditions==="Parcelado"&&s.qtdInstallments){let l=new Date(s.date);if(l.setMonth(l.getMonth()+s.qtdInstallments),new Date(s.date).getMonth()<=a.getMonth()&&l.getMonth()>=a.getMonth()){o.push(s);return}}}),c.forEach(s=>{if(s.paymentConditions==="Despesa recorrente"){o.push(s);return}if(new Date(s.date).getMonth()==a.getMonth()){o.push(s);return}if(s.paymentConditions==="Parcelado"&&s.qtdInstallments){let u=new Date(s.date);if(u.setMonth(u.getMonth()+s.qtdInstallments),new Date(s.date).getMonth()<=a.getMonth()&&u.getMonth()>=a.getMonth()){o.push(s);return}}}),e.status(201).json(o.sort((s,u)=>new Date(s.date).getMilliseconds()-new Date(u.date).getMilliseconds()))}catch(o){return e.status(500).json({error:o})}};function z(t){t.post("/generalList/all",T)}import{model as he,Schema as we}from"mongoose";var xe=new we({title:String,value:String,id_user:String,color:String,icon:String}),b=he("Categories",xe);var Y=async(t,e)=>{let{title:r,color:n,icon:o,id_user:a}=t.body;try{if(!a)return e.status(500).json({error:"id user required"});if(!r)return e.status(500).json({error:"title required"});n=n||"",o=o||"",await b.create({id_user:a,title:r,color:n,icon:o});let i=await b.find({id_user:a});return e.status(201).json(i)}catch{return e.status(500).json({error:"err"})}},J=async(t,e)=>{let{id_user:r}=t.body;try{let n=await b.find({id_user:r});return e.status(201).json(n)}catch(n){return e.status(500).json({error:n})}};function K(t){t.post("/category/all",J),t.post("/category/create",Y)}import{model as be,Schema as je}from"mongoose";var _e=new je({name:String,valueFinal:Number,dateInitial:Date,dateFinal:Date,valueRaised:Number,valueInitial:Number,complete:Boolean,id_user:String}),x=be("Goal",_e);var Q=async(t,e)=>{let{name:r,valueFinal:n,dateFinal:o,valueRaised:a,valueInitial:i,id_user:c}=t.body;try{if(Object.values([r,n,o,a,i,c]).some(g=>!g))return e.status(500).json({error:"there are empty fields"});let u=new Date,l=!1;await x.create({name:r,valueFinal:n,dateFinal:o,valueRaised:a,valueInitial:i,id_user:c,dateInitial:u,complete:l});let y=await x.find({id_user:c});return e.status(201).json(y)}catch{return e.status(500).json({error:"err"})}},V=async(t,e)=>{let r=t.params.id;try{let n=await x.findById(r);return e.status(201).json(n)}catch(n){return e.status(500).json({error:n})}},X=async(t,e)=>{let{id_user:r}=t.body;try{let n=await x.find({id_user:r});return e.status(201).json(n)}catch(n){return e.status(500).json({error:n})}};function Z(t){t.post("/goal/all",X),t.post("/goal/create",Q),t.get("/goal/:id",V)}import{model as Ge,Schema as ve}from"mongoose";var De=new ve({value:Number,date:Date,id_user:String,id_goal:String}),j=Ge("GoalRecurrence",De);var $=async(t,e)=>{let{value:r,date:n,id_goal:o,id_user:a}=t.body;try{if(Object.values([r,n,o,a]).some(s=>!s))return e.status(500).json({error:"there are empty fields"});await j.create({value:r,date:n,id_goal:o,id_user:a});let c=await j.find({id_goal:o});return e.status(201).json(c)}catch{return e.status(500).json({error:"err"})}},ee=async(t,e)=>{let{id_goal:r}=t.body;try{let n=await j.find({id_goal:r});return e.status(201).json(n)}catch(n){return e.status(500).json({error:n})}};function te(t){t.post("/goal/recurrence/all",ee),t.post("/goal/recurrence/create",$)}var R=Ie();function ne(){return E(R),k(R),H(R),z(R),K(R),Z(R),te(R),R}var h=re();h.use(qe());h.use(re.json());h.use(oe.urlencoded({extended:!0}));h.use(oe.json());h.use(ne());Se.connect("mongodb+srv://admin:12345@moon.p6ongcq.mongodb.net/?retryWrites=true&w=majority").then(()=>{console.log("mongoDB conection is working"),h.listen(9002)}).catch(t=>console.log(t,"deu erro :( (miado)"));export{h as app};
