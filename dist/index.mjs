import oe from"express";import Ce from"mongoose";import Fe from"cors";import se from"body-parser";import{Router as Me}from"express";import{model as ie,Schema as ue}from"mongoose";var ce=new ue({email:String,picture:String,name:String,id_google:String,creationDate:Date,updateDate:Date,locale:String,given_name:String,family_name:String,wage:Number}),f=ie("Users",ce);import le from"jsonwebtoken";function I(t){return le.sign(t,"admin",{expiresIn:"1d"})}var v=async(t,e)=>{try{let{id_google:n}=t.body;if(!await f.findOne({id_google:n}))return e.status(201).json({checkUser:!1});e.status(201).json({checkUser:!0})}catch{}},D=async(t,e,n)=>{try{let r=await f.find();return e.status(200).json(r)}catch(r){return e.status(500).json({error:r})}},S=async(t,e,n)=>{let{email:r,picture:o,name:s,id_google:i,locale:c,given_name:a,family_name:l}=t.body;try{if(await f.findOne({id_google:i}))throw"user already exists";return await f.create({email:r,picture:o,name:s,id_google:i,locale:c,given_name:a,family_name:l,creationDate:new Date,updateDate:new Date,wage:0}),e.status(201).json({message:"Person added!"})}catch(d){return e.status(500).json({error:d})}},q=async(t,e)=>{let{id_google:n}=t.body;try{let r=await f.findOne({id_google:n});if(!r)throw"email of user is not correct";let o=I({sub:r._id,id_google:r.id_google});return e.status(201).send({person:r,token:o})}catch(r){return e.status(500).json({error:r})}},M=async(t,e)=>{let{user_id:n,wage:r}=t.body;try{if(console.log(r,"wage"),console.log(n,"user_id "),!r)return e.status(500).json({error:"wage required"});if(!n)return e.status(500).json({error:"user required"});let o=await f.findOneAndUpdate({_id:n},{wage:r}),s=await f.findOne({_id:n});return e.status(201).send({people:s})}catch{return e.status(500).json({error:"err"})}};import de from"jsonwebtoken";var me=async(t,e)=>{let n=String(t?.headers?.token||"");if(n)de.verify(n,"admin",async(r,o)=>{if(r)return e.status(403).json({message:r.message,error:r});if(!await f.findOne({_id:o?.sub}))return e.status(403).json({messagem:"forBidden"});t.headers.user=o?.sub});else return e.status(401).json({messagem:"Unauthorized"})},u=me;function C(t){t.get("/user/getall",D),t.post("/user/check",v),t.post("/user/register",S),t.post("/user/login",q),t.post("/user/save/wage",M),t.post("/token",u)}import{model as pe,Schema as ge}from"mongoose";var fe=new ge({description:String,value:Number,date:Date,paymentConditions:String,paidGain:{type:Boolean,required:!1},category:String,observation:String,qtdInstallments:Number,valueRecurrence:Number,id_user:String}),m=pe("Gain",fe);var F=async(t,e)=>{let{id:n,data:r}=t.body;try{u(t,e);let o=await m.findByIdAndUpdate(n,r),s=await m.findById(n);return e.status(201).json(s)}catch(o){return e.status(500).json({error:o})}},E=async(t,e)=>{let{id:n}=t.body;try{u(t,e);let r=await m.findById(n);if(!r?._id)return e.status(500).json({error:"Ganho n\xE3o encontrado"});let o=await m.deleteOne({_id:n}),s=await m.find({id_user:r?.id_user});return e.status(201).json(s)}catch(r){return e.status(500).json({error:r})}},N=async(t,e)=>{let{id_user:n}=t.body;try{u(t,e);let r=await m.find({id_user:n});return e.status(201).json(r)}catch(r){return e.status(500).json({error:r})}},O=async(t,e)=>{try{u(t,e);let{id:n}=t.body,r=await m.findOne({_id:n});return e.status(201).json(r)}catch(n){return e.status(500).json({error:n})}},U=async(t,e,n)=>{u(t,e);let{description:r,value:o,date:s,paymentConditions:i,paidGain:c,category:a,observation:l,id_user:d,valueRecurrence:y,qtdInstallments:g}=t.body;if(!r||!o||!s||!i||!d)return e.status(500).json({error:"H\xE1 obrigatorios campos n\xE3o preenchidos"});a||(a="no information"),l||(l=""),l||(l=""),c||(c=!1),y||(y=0),g||(g=0);try{return await m.create({description:r,value:o,date:s,paymentConditions:i,paidGain:c,id_user:d,valueRecurrence:y,qtdInstallments:g}),e.status(201).json({message:"Ganho criado com sucesso!"})}catch(w){return e.status(500).json({error:w})}};function k(t){t.get("/gain/all",N),t.post("/gain/get",O),t.put("/gain/update",F),t.delete("/gain/delete",E),t.post("/gain/create",U)}import{model as ye,Schema as Re}from"mongoose";var he=new Re({description:String,value:Number,date:Date,paymentConditions:String,expensePayment:Boolean,category:String,local:String,qtdInstallments:Number,buyer:String,observation:String,id_goal:String,id_user:String,valueRecurrence:Number}),p=ye("Expense",he);var L=async(t,e)=>{let{id:n,data:r}=t.body;try{u(t,e);let o=await p.findByIdAndUpdate(n,r),s=await p.findById(n);return e.status(201).json(s)}catch(o){return e.status(500).json({error:o})}},B=async(t,e)=>{let{id:n}=t.body;try{u(t,e);let r=await p.findById(n);if(!r?._id)return e.status(500).json({error:"Gasto n\xE3o encontrado"});let o=await p.deleteOne({_id:n}),s=await p.find({id_user:r?.id_user});return e.status(201).json(s)}catch(r){return e.status(500).json({error:r})}},A=async(t,e)=>{let{id_user:n}=t.body;try{u(t,e);let r=await p.find({id_user:n});return e.status(201).json(r)}catch(r){return e.status(500).json({error:r})}},P=async(t,e)=>{try{u(t,e);let{id:n}=t.body,r=await p.findOne({_id:n});return e.status(201).json(r)}catch(n){return e.status(500).json({error:n})}},T=async(t,e,n)=>{u(t,e);let{description:r,value:o,date:s,paymentConditions:i,expensePayment:c,category:a,local:l,qtdInstallments:d,buyer:y,observation:g,id_goal:w,id_user:G,valueRecurrence:_}=t.body;if(!r||!o||!s||!i||!G||c===void 0)return e.status(500).json({error:"H\xE1 obrigatorios campos n\xE3o preenchidos"});_||(_=0),a||(a="no information"),g||(g=""),l||(g=""),w||(w=""),y||(y=""),d||(d=0);try{return await p.create({description:r,value:o,date:s,paymentConditions:i,expensePayment:c,category:a,local:l,qtdInstallments:d,buyer:y,observation:g,id_goal:w,id_user:G,valueRecurrence:_}),e.status(201).json({message:"Gasto cadastrado com sucesso!"})}catch(ae){return e.status(500).json({error:ae})}};function $(t){t.post("/expense/all",A),t.get("/expense/get",P),t.put("/expense/update",L),t.delete("/expense/delete",B),t.post("/expense/create",T)}var W=async(t,e)=>{let{id_user:n,date:r}=t.body;try{u(t,e),console.log(n,"id_userid_user");let o=[];r||(r=new Date);let s=new Date(r);if(!n)return e.status(500).json({error:"user required"});let i=await m.find({id_user:n}),c=await p.find({id_user:n});return i.forEach((a,l)=>{if(a.paymentConditions==="Despesa recorrente"){o.push(a);return}if(new Date(a.date).getMonth()==s.getMonth()){o.push(a);return}if(a.paymentConditions==="Parcelado"&&a.qtdInstallments){let d=new Date(a.date);if(d.setMonth(d.getMonth()+a.qtdInstallments),new Date(a.date).getMonth()<=s.getMonth()&&d.getMonth()>=s.getMonth()){o.push(a);return}}}),c.forEach(a=>{if(a.paymentConditions==="Despesa recorrente"){o.push(a);return}if(new Date(a.date).getMonth()==s.getMonth()){o.push(a);return}if(a.paymentConditions==="Parcelado"&&a.qtdInstallments){let l=new Date(a.date);if(l.setMonth(l.getMonth()+a.qtdInstallments),new Date(a.date).getMonth()<=s.getMonth()&&l.getMonth()>=s.getMonth()){o.push(a);return}}}),e.status(201).json(o.sort((a,l)=>new Date(a.date).getMilliseconds()-new Date(l.date).getMilliseconds()))}catch(o){return e.status(500).json({error:o})}};function H(t){t.post("/generalList/all",W)}import{model as we,Schema as xe}from"mongoose";var je=new xe({title:String,value:String,id_user:String,color:String,icon:String}),b=we("Categories",je);var z=async(t,e)=>{let{title:n,color:r,icon:o,id_user:s}=t.body;try{if(!s)return e.status(500).json({error:"id user required"});if(!n)return e.status(500).json({error:"title required"});r=r||"",o=o||"",await b.create({id_user:s,title:n,color:r,icon:o});let i=await b.find({id_user:s});return e.status(201).json(i)}catch{return e.status(500).json({error:"err"})}},Y=async(t,e)=>{let{id_user:n}=t.body;try{let r=await b.find({id_user:n});return e.status(201).json(r)}catch(r){return e.status(500).json({error:r})}};function J(t){t.post("/category/all",Y),t.post("/category/create",z)}import{model as be,Schema as _e}from"mongoose";var Ge=new _e({name:String,valueFinal:Number,dateInitial:Date,dateFinal:Date,valueRaised:Number,valueInitial:Number,complete:Boolean,id_user:String}),x=be("goal",Ge);import Ie from"mongoose";var K=async(t,e)=>{let{name:n,valueFinal:r,dateFinal:o,valueRaised:s,valueInitial:i,id_user:c}=t.body;try{if(Object.values([n,r,o,s,i,c]).some(g=>!g))return e.status(500).json({error:"there are empty fields"});let l=new Date,d=!1;await x.create({name:n,valueFinal:r,dateFinal:o,valueRaised:s,valueInitial:i,id_user:c,dateInitial:l,complete:d});let y=await x.find({id_user:c});return e.status(201).json(y)}catch{return e.status(500).json({error:"err"})}},Q=async(t,e)=>{let n=t.params.id;try{u(t,e);let r=Ie.Types.ObjectId(n),o=await x.aggregate([{$match:{_id:r}},{$lookup:{from:"goalrecurrences",localField:"_id",foreignField:"id_goal",as:"recurrence"}}]).exec(function(s,i){if(s)return console.error(s),e.status(500).json({error:"Ocorreu um erro ao consultar o banco de dados."});if(i.length===0)return e.status(404).json({error:"Goal n\xE3o encontrado."});let c=i[0];e.json(c)})}catch(r){return e.status(500).json({error:r})}},V=async(t,e)=>{let{id_user:n}=t.body;try{let r=await x.aggregate([{$match:{id_user:n}},{$lookup:{from:"goalrecurrences",localField:"_id",foreignField:"id_goal",as:"recurrence"}}]).exec();return e.status(201).json(r)}catch(r){return e.status(500).json({error:r})}};function X(t){t.post("/goal/all",V),t.post("/goal/create",K),t.get("/goal/:id",Q)}import ve,{model as De,Schema as Se}from"mongoose";var qe=new Se({value:Number,date:Date,id_user:String,id_goal:{type:ve.Schema.Types.ObjectId,required:!0,ref:"goal"}}),j=De("goalrecurrence",qe);var Z=async(t,e)=>{let{value:n,date:r,id_goal:o,id_user:s}=t.body;try{if(Object.values([n,r,o,s]).some(a=>!a))return e.status(500).json({error:"there are empty fields"});await j.create({value:n,date:r,id_goal:o,id_user:s});let c=await j.find({id_goal:o});return e.status(201).json(c)}catch{return e.status(500).json({error:"err"})}},ee=async(t,e)=>{let n=t.params.id;try{u(t,e);let r=await j.findOne({id:n});return e.status(201).json(r)}catch(r){return e.status(500).json({error:r})}},te=async(t,e)=>{let{id_goal:n}=t.body;try{let r=await j.find({id_goal:n});return e.status(201).json(r)}catch(r){return e.status(500).json({error:r})}};function re(t){t.post("/goal/recurrence/all",te),t.get("/goal/recurrence/:id",ee),t.post("/goal/recurrence/create",Z)}var R=Me();function ne(){return C(R),k(R),$(R),H(R),J(R),X(R),re(R),R}var h=oe();h.use(Fe());h.use(oe.json());h.use(se.urlencoded({extended:!0}));h.use(se.json());h.use(ne());Ce.connect("mongodb+srv://admin:12345@moon.p6ongcq.mongodb.net/?retryWrites=true&w=majority").then(()=>{console.log("mongoDB conection is working"),h.listen(9002)}).catch(t=>console.log(t,"deu erro :( (miado)"));export{h as app};
