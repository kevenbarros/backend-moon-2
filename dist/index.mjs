import T from"express";import ae from"mongoose";import ie from"cors";import z from"body-parser";import{Router as oe}from"express";import{model as J,Schema as K}from"mongoose";var Q=new K({email:String,picture:String,name:String,id_google:String,creationDate:Date,updateDate:Date,locale:String,given_name:String,family_name:String,wage:Number}),g=J("Users",Q);import V from"jsonwebtoken";function _(t){return V.sign(t,"admin",{expiresIn:"1d"})}var j=async(t,e)=>{try{let{id_google:s}=t.body;if(!await g.findOne({id_google:s}))return e.status(201).json({checkUser:!1});e.status(201).json({checkUser:!0})}catch{}},G=async(t,e,s)=>{try{let n=await g.find();return e.status(200).json(n)}catch(n){return e.status(500).json({error:n})}},D=async(t,e,s)=>{let{email:n,picture:r,name:a,id_google:l,locale:m,given_name:o,family_name:i}=t.body;try{if(await g.findOne({id_google:l}))throw"user already exists";return await g.create({email:n,picture:r,name:a,id_google:l,locale:m,given_name:o,family_name:i,creationDate:new Date,updateDate:new Date,wage:0}),e.status(201).json({message:"Person added!"})}catch(d){return e.status(500).json({error:d})}},I=async(t,e)=>{let{id_google:s}=t.body;try{let n=await g.findOne({id_google:s});if(!n)throw"email of user is not correct";let r=_({sub:n._id,id_google:n.id_google});return e.status(201).send({person:n,token:r})}catch(n){return e.status(500).json({error:n})}},v=async(t,e)=>{let{user_id:s,wage:n}=t.body;try{if(console.log(n,"wage"),console.log(s,"user_id "),!n)return e.status(500).json({error:"wage required"});if(!s)return e.status(500).json({error:"user required"});let r=await g.findOneAndUpdate({_id:s},{wage:n}),a=await g.findOne({_id:s});return e.status(201).send({people:a})}catch{return e.status(500).json({error:"err"})}};import X from"jsonwebtoken";var Z=async(t,e)=>{let s=String(t?.headers?.token||"");if(s)X.verify(s,"admin",async(n,r)=>{if(n)return e.status(403).json({message:n.message,error:n});if(!await g.findOne({_id:r?.sub}))return e.status(403).json({messagem:"forBidden"});t.headers.user=r?.sub});else return e.status(401).json({messagem:"Unauthorized"})},u=Z;function M(t){t.get("/user/getall",G),t.post("/user/check",j),t.post("/user/register",D),t.post("/user/login",I),t.post("/user/save/wage",v),t.post("/token",u)}import{model as $,Schema as ee}from"mongoose";var te=new ee({description:String,value:Number,date:Date,paymentConditions:String,paidGain:Boolean,category:String,observation:String,qtdInstallments:Number,valueRecurrence:Number,id_user:String}),c=$("Gain",te);var q=async(t,e)=>{let{id:s,data:n}=t.body;try{u(t,e);let r=await c.findByIdAndUpdate(s,n),a=await c.findById(s);return e.status(201).json(a)}catch(r){return e.status(500).json({error:r})}},S=async(t,e)=>{let{id:s}=t.body;try{u(t,e);let n=await c.findById(s);if(!n?._id)return e.status(500).json({error:"Ganho n\xE3o encontrado"});let r=await c.deleteOne({_id:s}),a=await c.find({id_user:n?.id_user});return e.status(201).json(a)}catch(n){return e.status(500).json({error:n})}},E=async(t,e)=>{let{id_user:s}=t.body;try{u(t,e);let n=await c.find({id_user:s});return e.status(201).json(n)}catch(n){return e.status(500).json({error:n})}},U=async(t,e)=>{try{u(t,e);let{id:s}=t.body,n=await c.findOne({_id:s});return e.status(201).json(n)}catch(s){return e.status(500).json({error:s})}},N=async(t,e,s)=>{u(t,e);let{description:n,value:r,date:a,paymentConditions:l,paidGain:m,category:o,observation:i,id_user:d,valueRecurrence:y,qtdInstallments:f}=t.body;if(!n||!r||!a||!l||!d)return e.status(500).json({error:"H\xE1 obrigatorios campos n\xE3o preenchidos"});o||(o="no information"),i||(i=""),i||(i=""),m||(m=!1),y||(y=0),f||(f=0);try{return await c.create({description:n,value:r,date:a,paymentConditions:l,paidGain:m,id_user:d,valueRecurrence:y,qtdInstallments:f}),e.status(201).json({message:"Ganho criado com sucesso!"})}catch(x){return e.status(500).json({error:x})}};function k(t){t.get("/gain/all",E),t.post("/gain/get",U),t.put("/gain/update",q),t.delete("/gain/delete",S),t.post("/gain/create",N)}import{model as ne,Schema as se}from"mongoose";var re=new se({description:String,value:Number,date:Date,paymentConditions:String,expensePayment:Boolean,category:String,local:String,qtdInstallments:Number,buyer:String,observation:String,id_goal:String,id_user:String,valueRecurrence:Number}),p=ne("Expense",re);var C=async(t,e)=>{let{id:s,data:n}=t.body;try{u(t,e);let r=await p.findByIdAndUpdate(s,n),a=await p.findById(s);return e.status(201).json(a)}catch(r){return e.status(500).json({error:r})}},F=async(t,e)=>{let{id:s}=t.body;try{u(t,e);let n=await p.findById(s);if(!n?._id)return e.status(500).json({error:"Gasto n\xE3o encontrado"});let r=await p.deleteOne({_id:s}),a=await p.find({id_user:n?.id_user});return e.status(201).json(a)}catch(n){return e.status(500).json({error:n})}},O=async(t,e)=>{let{id_user:s}=t.body;try{u(t,e);let n=await p.find({id_user:s});return e.status(201).json(n)}catch(n){return e.status(500).json({error:n})}},A=async(t,e)=>{try{u(t,e);let{id:s}=t.body,n=await p.findOne({_id:s});return e.status(201).json(n)}catch(s){return e.status(500).json({error:s})}},B=async(t,e,s)=>{u(t,e);let{description:n,value:r,date:a,paymentConditions:l,expensePayment:m,category:o,local:i,qtdInstallments:d,buyer:y,observation:f,id_goal:x,id_user:b,valueRecurrence:w}=t.body;if(!n||!r||!a||!l||!b||m===void 0)return e.status(500).json({error:"H\xE1 obrigatorios campos n\xE3o preenchidos"});w||(w=0),o||(o="no information"),f||(f=""),i||(f=""),x||(x=""),y||(y=""),d||(d=0);try{return await p.create({description:n,value:r,date:a,paymentConditions:l,expensePayment:m,category:o,local:i,qtdInstallments:d,buyer:y,observation:f,id_goal:x,id_user:b,valueRecurrence:w}),e.status(201).json({message:"Gasto cadastrado com sucesso!"})}catch(Y){return e.status(500).json({error:Y})}};function P(t){t.post("/expense/all",O),t.get("/expense/get",A),t.put("/expense/update",C),t.delete("/expense/delete",F),t.post("/expense/create",B)}var L=async(t,e)=>{let{id_user:s,date:n}=t.body;try{u(t,e),console.log(s,"id_userid_user");let r=[];n||(n=new Date);let a=new Date(n);if(!s)return e.status(500).json({error:"user required"});let l=await c.find({id_user:s}),m=await p.find({id_user:s});return l.forEach((o,i)=>{if(o.paymentConditions==="Despesa recorrente"){r.push(o);return}if(new Date(o.date).getMonth()==a.getMonth()){r.push(o);return}if(o.paymentConditions==="Parcelado"&&o.qtdInstallments){let d=new Date(o.date);if(d.setMonth(d.getMonth()+o.qtdInstallments),new Date(o.date).getMonth()<=a.getMonth()&&d.getMonth()>=a.getMonth()){r.push(o);return}}}),m.forEach(o=>{if(o.paymentConditions==="Despesa recorrente"){r.push(o);return}if(new Date(o.date).getMonth()==a.getMonth()){r.push(o);return}if(o.paymentConditions==="Parcelado"&&o.qtdInstallments){let i=new Date(o.date);if(i.setMonth(i.getMonth()+o.qtdInstallments),new Date(o.date).getMonth()<=a.getMonth()&&i.getMonth()>=a.getMonth()){r.push(o);return}}}),e.status(201).json(r.sort((o,i)=>new Date(o.date).getMilliseconds()-new Date(i.date).getMilliseconds()))}catch(r){return e.status(500).json({error:r})}};function W(t){t.post("/generalList/all",L)}var R=oe();function H(){return M(R),k(R),P(R),W(R),R}var h=T();h.use(ie());h.use(T.json());h.use(z.urlencoded({extended:!0}));h.use(z.json());h.use(H());ae.connect("mongodb+srv://admin:12345@moon.p6ongcq.mongodb.net/?retryWrites=true&w=majority").then(()=>{console.log("mongoDB conection is working"),h.listen(9002)}).catch(t=>console.log(t,"deu erro :( (miado)"));export{h as app};
